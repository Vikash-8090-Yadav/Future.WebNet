{"version":3,"sources":["../../lib/errors.ts","../../lib/index.ts","../../../lib/lifecycle/index.ts","../../lib/messages.ts","../../lib/utils.ts","../../lib/client.ts","../../../lib/connection/index.ts","../../../lib/lifecycle/publish.ts","../../../lib/lifecycle/subscribe.ts","functions/styling.ts","components/common/Button.tsx","utils/constants.ts","utils/utils.ts","components/common/NetworkIndicator.tsx","components/common/Card.tsx","components/ConfirmNetworkChange.tsx","components/header/Header.tsx","components/dashboardprovider/IncomingRequest.tsx","components/dashboardprovider/index.tsx","components/ConnectNetwork.tsx","Dashboard.tsx","App.tsx","index.tsx"],"names":["debug","debug_1","default","_connectionType","classNames","classes","filter","Boolean","join","DIMENSIONS","xs","sm","md","lg","SIZE","VARIANT","outlined","blue","red","brown","filled","empty","Button","React","forwardRef","ref","children","className","color","size","variant","startIcon","undefined","endIcon","fullWidth","loading","disabled","rest","INTERACTIVE_REQUESTS","UNSUPPORTED_REQUESTS","isInteractiveRequest","request","includes","message","payload","method","isUnsupportedRequest","forwardDashboardProviderRequest","provider","connector","a","console","id","sendAsync","promisify","bind","result","connectorId","jsonrpc","error","handleDashboardProviderRequest","lifecycle","respond","respondToUnsupportedRequest","defaultMessage","eth_sign","code","getNetworkName","chainId","axios","get","chainList","data","chain","name","getDisplayName","address","reverseLookup","ensName","shortenedAccount","shortenAddress","lookupAddress","slice","NetworkIndicator","useState","networkName","setNetworkName","textColor","useEffect","updateNetwork","connectedNetworkName","Card","header","body","footer","headerOrNull","bodyOrNull","footerOrNull","ConfirmNetworkChanged","confirm","newChainId","previousChainId","confirmBody","confirmButton","onClick","Header","disconnect","displayName","setDisplayName","useAccount","accountData","useNetwork","networkData","useConnect","connectData","updateAccountDisplay","connected","getProvider","src","width","alt","IncomingRequest","setRequests","disable","setDisable","removeFromRequests","previousRequests","other","process","reject","transaction","params","messageParams","from","JSON","parse","formatDashboardProviderRequestParameters","DashboardProvider","paused","requests","forEach","incomingRequests","map","ConnectNetwork","connect","connectButton","connectors","Dashboard","setPaused","connectedChainId","setConnectedChainId","setChainId","client","setClient","dashboardProviderRequests","setDashboardProviderRequests","initializeSocket","ready","host","window","location","hostname","port","Number","c","DashboardMessageBusClient","subscribe","on","isDashboardProviderMessage","isInvalidateMessage","isDebugMessage","log","isLogMessage","close","ConfirmNetworkChange","defaultChain","mainnet","_config","ret","wProvider","winEth","ethereum","enable","then","r","catch","e","ethproviders","Web3Provider","getDefaultProvider","getNetwork","InjectedConnector","chains","defaultChains","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f88f3e43.chunk.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MessageBusConnectionError = exports.AlreadyRespondedError = void 0;\nclass AlreadyRespondedError extends Error {\n    constructor({ serviceBusMessage }) {\n        super(`A response has already been sent for message id ${serviceBusMessage.id} of type \"${serviceBusMessage.type}\".`);\n    }\n}\nexports.AlreadyRespondedError = AlreadyRespondedError;\nclass MessageBusConnectionError extends Error {\n    constructor({ message, cause }) {\n        super(message);\n        this.cause = cause;\n    }\n    toString() {\n        return this.cause\n            ? `${super.toString()}\\ncaused by: ${this.cause.toString()}`\n            : super.toString();\n    }\n}\nexports.MessageBusConnectionError = MessageBusConnectionError;\n//# sourceMappingURL=errors.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./messages\"), exports);\n__exportStar(require(\"./utils\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./publish\"), exports);\n__exportStar(require(\"./subscribe\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isInvalidateMessage = exports.isDebugMessage = exports.isLogMessage = exports.isDashboardProviderMessage = exports.invalidateMessageType = exports.debugMessageType = exports.logMessageType = exports.dashboardProviderMessageType = void 0;\nexports.dashboardProviderMessageType = \"provider\";\nexports.logMessageType = \"log\";\nexports.debugMessageType = \"debug\";\nexports.invalidateMessageType = \"invalidate\";\nconst isDashboardProviderMessage = (message) => {\n    return message.type === exports.dashboardProviderMessageType;\n};\nexports.isDashboardProviderMessage = isDashboardProviderMessage;\nconst isLogMessage = (message) => {\n    return message.type === exports.logMessageType;\n};\nexports.isLogMessage = isLogMessage;\nconst isDebugMessage = (message) => {\n    return message.type === exports.debugMessageType;\n};\nexports.isDebugMessage = isDebugMessage;\nconst isInvalidateMessage = (message) => {\n    return message.type === exports.invalidateMessageType;\n};\nexports.isInvalidateMessage = isInvalidateMessage;\n//# sourceMappingURL=messages.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createMessage = exports.base64ToJson = exports.jsonToBase64 = void 0;\n/**\n * Convert any JS object or value to a base64 representation of it\n */\nconst jsonToBase64 = (json) => {\n    const stringifiedJson = JSON.stringify(json);\n    const buffer = Buffer.from(stringifiedJson);\n    const base64 = buffer.toString(\"base64\");\n    return base64;\n};\nexports.jsonToBase64 = jsonToBase64;\n/**\n * Convert the base64 representation of a JS object or value to its JS representation\n * @dev This is the reverse of `jsonToBase64` and is not expected to work with other base64 formats\n */\nconst base64ToJson = (base64) => {\n    const buffer = Buffer.from(base64, \"base64\");\n    const stringifiedJson = buffer.toString(\"utf8\");\n    const json = JSON.parse(stringifiedJson);\n    return json;\n};\nexports.base64ToJson = base64ToJson;\nconst createMessage = (type, payload) => {\n    const id = Math.random();\n    return { id, type, payload };\n};\nexports.createMessage = createMessage;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DashboardMessageBusClient = void 0;\nconst dashboard_message_bus_common_1 = require(\"@truffle/dashboard-message-bus-common\");\nconst connection_1 = require(\"./connection\");\nconst delay_1 = __importDefault(require(\"delay\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst lifecycle_1 = require(\"./lifecycle\");\nconst promise_tracker_1 = require(\"@truffle/promise-tracker\");\nconst debug = debug_1.default(`dashboard-message-bus-client:client`);\nclass DashboardMessageBusClient {\n    constructor(options) {\n        this._subscriptions = [];\n        this._options = Object.assign({ host: \"localhost\", port: 24012, maxRetries: 1, retryDelayMsec: 100 }, (options !== null && options !== void 0 ? options : {}));\n        const { host, port, publishPort, subscribePort } = this._options;\n        this._publishConnection = new connection_1.DashboardMessageBusConnection({\n            host,\n            port,\n            publishPort,\n            connectionType: \"publish\"\n        });\n        this._subscribeConnection = new connection_1.DashboardMessageBusConnection({\n            host,\n            port,\n            subscribePort,\n            connectionType: \"subscribe\"\n        });\n        this._subscribeConnection.on(\"message\", this._messageHandler.bind(this));\n    }\n    get options() {\n        return Object.assign({}, this._options);\n    }\n    ready() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._withRetriesAsync(() => __awaiter(this, void 0, void 0, function* () {\n                Promise.all([\n                    this._publishConnection.connect(),\n                    this._subscribeConnection.connect()\n                ]);\n            }));\n        });\n    }\n    publish(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { type, payload } = options;\n            let message = dashboard_message_bus_common_1.createMessage(type, payload);\n            try {\n                const lifecycle = new lifecycle_1.PublishMessageLifecycle({\n                    message,\n                    connection: this._publishConnection\n                });\n                return yield this._withRetriesAsync((() => __awaiter(this, void 0, void 0, function* () {\n                    debug(\"publisher sending message %o\", message);\n                    yield this._publishConnection.send(message);\n                    return lifecycle;\n                })).bind(this));\n            }\n            catch (err) {\n                debug(\"sending message %o failed due to error %s\", message, err);\n                throw err;\n            }\n        });\n    }\n    subscribe(options) {\n        const subscription = new lifecycle_1.DashboardMessageBusSubscription(options);\n        this._subscriptions.push(subscription);\n        return subscription;\n    }\n    close(force = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!force) {\n                yield this.waitForOutstandingPromises();\n            }\n            this._subscriptions.map(sub => sub._end());\n            this._subscriptions = [];\n            yield Promise.all([\n                this._subscribeConnection.close(),\n                this._publishConnection.close()\n            ]);\n        });\n    }\n    waitForOutstandingPromises() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield promise_tracker_1.waitForOutstandingPromises({ target: this });\n            return;\n        });\n    }\n    _messageHandler(message) {\n        this._subscriptions.map(sub => sub._evaluateMessage({ message, connection: this._subscribeConnection }));\n    }\n    _withRetriesAsync(f) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { maxRetries, retryDelayMsec } = this._options;\n            for (let tryCount = 0; tryCount <= maxRetries; tryCount++) {\n                try {\n                    const result = f.call(this);\n                    if (result.then) {\n                        // ensure any promise rejections are handled here so we count them as\n                        // failures to retry\n                        return yield result;\n                    }\n                    else {\n                        return result;\n                    }\n                }\n                catch (err) {\n                    if (tryCount < maxRetries) {\n                        debug(\"Attempt failed, %s of %s attempts remaining, delaying %s msec before retrying.\", maxRetries - tryCount, maxRetries + 1, retryDelayMsec);\n                        yield delay_1.default(retryDelayMsec);\n                        debug(\"Retrying failed operation now\");\n                    }\n                    else {\n                        debug(\"Operation failed after %s attempts\", tryCount);\n                        throw err;\n                    }\n                }\n            }\n        });\n    }\n}\nexports.DashboardMessageBusClient = DashboardMessageBusClient;\n//# sourceMappingURL=client.js.map","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DashboardMessageBusConnection = void 0;\nconst isomorphic_ws_1 = __importDefault(require(\"isomorphic-ws\"));\nconst axios_1 = __importDefault(require(\"axios\"));\nconst dashboard_message_bus_common_1 = require(\"@truffle/dashboard-message-bus-common\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst errors_1 = require(\"../errors\");\nconst tiny_typed_emitter_1 = require(\"tiny-typed-emitter\");\nconst promise_tracker_1 = require(\"@truffle/promise-tracker\");\nconst delay_1 = __importDefault(require(\"delay\"));\nconst debug = debug_1.default(\"dashboard-message-bus-client:connection\");\nconst debugMessage = debug_1.default(\"dashboard-message-bus-client:message\");\nclass DashboardMessageBusConnection extends tiny_typed_emitter_1.TypedEmitter {\n    constructor({ host, port, publishPort, subscribePort, connectionType: socketType }) {\n        super();\n        this._host = host;\n        this._port = port;\n        this._publishPort = publishPort;\n        this._subscribePort = subscribePort;\n        this._connectionType = socketType;\n    }\n    get isConnected() {\n        return this._socket && this._socket.readyState === isomorphic_ws_1.default.OPEN;\n    }\n    get isConnecting() {\n        return this._socket && this._socket.readyState === isomorphic_ws_1.default.CONNECTING;\n    }\n    get isClosing() {\n        return this._socket && this._socket.readyState === isomorphic_ws_1.default.CLOSING;\n    }\n    connect() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._socket) {\n                switch (this._socket.readyState) {\n                    case isomorphic_ws_1.default.CONNECTING:\n                        debug(\"connect: %s already attempting to connect (readyState switch)\", this._connectionType);\n                        yield delay_1.default(10);\n                        return this.connect();\n                    case isomorphic_ws_1.default.OPEN:\n                        // we're already connected, just return\n                        debug(\"connect: %s already connected\", this._connectionType);\n                        return;\n                    case isomorphic_ws_1.default.CLOSING:\n                    case isomorphic_ws_1.default.CLOSED:\n                        debug(\"connect: %s was previously connected but has been closed\", this._connectionType);\n                        // already closed or on our way there, so we'll just recreate it in a\n                        // moment\n                        delete this._socket;\n                }\n            }\n            try {\n                if (this._connecting) {\n                    debug(\"connect: %s already attempting to connect (_connecting flag)\", this._connectionType);\n                    yield delay_1.default(10);\n                    return this.connect();\n                }\n                this._connecting = true;\n                const port = yield this._getMessageBusPort();\n                const url = `ws://${this._host}:${port}`;\n                debug(\"connect: %s is attempting to connect to %s\", this._connectionType, url);\n                this._socket = new isomorphic_ws_1.default(url);\n                (_a = this._socket) === null || _a === void 0 ? void 0 : _a.addEventListener(\"message\", ((event) => {\n                    if (typeof event.data !== \"string\") {\n                        event.data = event.data.toString();\n                    }\n                    const message = dashboard_message_bus_common_1.base64ToJson(event.data);\n                    debugMessage(\"%s connection received message %o\", this._connectionType, message);\n                    this.emit(\"message\", message);\n                }).bind(this));\n                // connecting\n                // we now have a socket that's in the process of opening, so return a\n                // promise that resolves when it opens, or fails to open\n                const connectPromise = this._createEventWrapperPromise((resolve, reject) => {\n                    return {\n                        open: () => {\n                            var _a, _b;\n                            debug(\"connect: %s connection succeeded to url %s\", this._connectionType, (_a = this._socket) === null || _a === void 0 ? void 0 : _a.url);\n                            if (this._connectionType === \"subscribe\") {\n                                (_b = this._socket) === null || _b === void 0 ? void 0 : _b.send(\"ready\");\n                            }\n                            resolve();\n                            this._connecting = false;\n                        },\n                        error: (event) => {\n                            var _a;\n                            debug(\"connect: %s connection to url %s failed due to error %s\", this._connectionType, (_a = this._socket) === null || _a === void 0 ? void 0 : _a.url, event.error);\n                            reject(new errors_1.MessageBusConnectionError({\n                                message: event.error.message,\n                                cause: event.error\n                            }));\n                            this._connecting = false;\n                        },\n                        close: (event) => {\n                            var _a;\n                            debug(\"connect: %s connection to url %s closed before successfully connecting due to code %s and reason %s\", this._connectionType, (_a = this._socket) === null || _a === void 0 ? void 0 : _a.url, event.code, event.reason);\n                            reject(new errors_1.MessageBusConnectionError({\n                                message: `Socket connection closed with code '${event.code}' and reason '${event.reason}'`\n                            }));\n                            this._connecting = false;\n                        }\n                    };\n                });\n                let timedout = false;\n                yield Promise.race([\n                    connectPromise,\n                    () => __awaiter(this, void 0, void 0, function* () {\n                        yield delay_1.default(350);\n                        timedout = true;\n                    })\n                ]);\n                if (timedout) {\n                    debug(\"connect: %s connection to url %s timed out\", this._connectionType, url);\n                }\n            }\n            catch (_b) {\n                this._connecting = false;\n            }\n        });\n    }\n    send(dataOrMessage) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const encodedMessage = typeof dataOrMessage === \"string\"\n                ? dataOrMessage\n                : dashboard_message_bus_common_1.jsonToBase64(dataOrMessage);\n            yield this.connect();\n            debug(\"send: %s connection sending %o\", this._connectionType, dashboard_message_bus_common_1.base64ToJson(encodedMessage));\n            (_a = this._socket) === null || _a === void 0 ? void 0 : _a.send(encodedMessage);\n        });\n    }\n    close() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._socket) {\n                return;\n            }\n            if (this._socket.readyState <= isomorphic_ws_1.default.CLOSING) {\n                const promise = this._createEventWrapperPromise((resolve, reject) => {\n                    return {\n                        error: (event) => {\n                            reject(event.error);\n                        },\n                        close: () => {\n                            debug(\"%s connection closed\", this._connectionType);\n                            resolve();\n                        }\n                    };\n                });\n                this._socket.close();\n                return promise;\n            }\n        });\n    }\n    _getMessageBusPort() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._connectionType === \"subscribe\" && this._subscribePort) {\n                return this._subscribePort;\n            }\n            if (this._connectionType === \"publish\" && this._publishPort) {\n                return this._publishPort;\n            }\n            // otherwise, fetch it from the server\n            try {\n                debug(\"_getMessageBusPort: %s connection attempting to fetch ports\", this._connectionType);\n                const { data } = yield axios_1.default.get(`http://${this._host}:${this._port}/ports`, {\n                    timeout: 350\n                });\n                const port = this._connectionType === \"subscribe\"\n                    ? data.subscribePort\n                    : data.publishPort;\n                debug(\"_getMessageBusPort: %s connection will use port %s\", this._connectionType, port);\n                return port;\n            }\n            catch (err) {\n                debug(\"_getMessageBusPort: failed fetching ports for %s connection due to error %s\", this._connectionType, err);\n                throw err;\n            }\n        });\n    }\n    _createEventWrapperPromise(handlerFactory) {\n        return new Promise(((resolve, reject) => {\n            this._registerEventHandlers(handlerFactory.call(this, resolve, reject));\n        }).bind(this));\n    }\n    _registerEventHandlers(handlers) {\n        var _a;\n        let wrappedHandlers = {};\n        for (const eventType in handlers) {\n            wrappedHandlers[eventType] = ((...args) => {\n                handlers[eventType].call(this, ...args);\n                this._cleanUpEventHandlers(wrappedHandlers);\n            }).bind(this);\n            (_a = this._socket) === null || _a === void 0 ? void 0 : _a.addEventListener(eventType, wrappedHandlers[eventType]);\n        }\n    }\n    _cleanUpEventHandlers(handlers) {\n        var _a;\n        for (const eventType in handlers) {\n            (_a = this._socket) === null || _a === void 0 ? void 0 : _a.removeEventListener(eventType, handlers[eventType]);\n        }\n    }\n}\n__decorate([\n    promise_tracker_1.tracked\n], DashboardMessageBusConnection.prototype, \"send\", null);\nexports.DashboardMessageBusConnection = DashboardMessageBusConnection;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PublishMessageLifecycle = void 0;\nconst dashboard_message_bus_common_1 = require(\"@truffle/dashboard-message-bus-common\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = debug_1.default(`dashboard-message-bus-client:publish`);\nclass PublishMessageLifecycle {\n    constructor({ message, connection }) {\n        this._responseReceived = false;\n        this._invalidated = false;\n        this._abandoned = false;\n        this.message = message;\n        this._connection = connection;\n        this._messageHandler = this._messageHandler.bind(this);\n        this.response = new Promise(resolve => {\n            this._responsePromiseResolve = resolve;\n        });\n        connection.on(\"message\", this._messageHandler);\n    }\n    /**\n     * Notify other potential subscribers of this message that it has been\n     * invalidated, and they therefore should not respond.\n     */\n    invalidate() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._abandoned || this._invalidated || this._responseReceived) {\n                return;\n            }\n            this._invalidated = true;\n            this._connection.off(\"message\", this._messageHandler);\n            /*\n             * Resolving the response promise with `null` is the best of the bad options\n             * when a message is invalidated\n             *\n             * Other options included rejecting with an error, and simply letting the\n             * promise go unresolved.\n             *\n             * Letting the promise go unresolved is worst option, as it prevents the\n             * `finally` block/handler from ever running.\n             *\n             * Rejecting with an error is maybe okay, but there's nothing to prompt the\n             * consumer of this library to know that they'll need to catch this error or\n             * else they'll encounter terminations due to unresolved promises.\n             *\n             * Returning null means that authors writing TS code against this library\n             * will at least have some indicator that the message invalidation mechanism\n             * exists, and they may need to write code to handle it.\n             *\n             */\n            this._responsePromiseResolve(null);\n            yield this._connection.send(dashboard_message_bus_common_1.createMessage(dashboard_message_bus_common_1.invalidateMessageType, this.message.id));\n        });\n    }\n    /**\n     * Stop waiting for the response to this message, but don't invalidate it,\n     * either.\n     */\n    abandon() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._abandoned || this._invalidated || this._responseReceived) {\n                return;\n            }\n            this._abandoned = true;\n            this._connection.off(\"message\", this._messageHandler);\n            /*\n             * Resolving the response promise with `null` is the best of the bad options\n             * when a message is invalidated\n             *\n             * Other options included rejecting with an error, and simply letting the\n             * promise go unresolved.\n             *\n             * Letting the promise go unresolved is worst option, as it prevents the\n             * `finally` block/handler from ever running.\n             *\n             * Rejecting with an error is maybe okay, but there's nothing to prompt the\n             * consumer of this library to know that they'll need to catch this error or\n             * else they'll encounter terminations due to unresolved promises.\n             *\n             * Returning null means that authors writing TS code against this library\n             * will at least have some indicator that the message invalidation mechanism\n             * exists, and they may need to write code to handle it.\n             *\n             */\n            this._responsePromiseResolve(null);\n        });\n    }\n    _messageHandler(response) {\n        if (response.id === this.message.id) {\n            this._responseReceived = true;\n            this._connection.off(\"message\", this._messageHandler);\n            debug(\"Received response %o for message %s of type '%s'\", response, this.message.id, this.message.type);\n            return this._responsePromiseResolve(response);\n        }\n        if (invalidatesMessage({ response, message: this.message })) {\n            this._invalidated = true;\n            this._connection.off(\"message\", this._messageHandler);\n            debug(\"Message id %s of type '%s' was invalidated.\", this.message.id, this.message.type);\n            return this._responsePromiseResolve(null);\n        }\n    }\n}\nexports.PublishMessageLifecycle = PublishMessageLifecycle;\nfunction invalidatesMessage({ response, message }) {\n    if (response.type !== dashboard_message_bus_common_1.invalidateMessageType &&\n        message.type !== dashboard_message_bus_common_1.invalidateMessageType) {\n        return false;\n    }\n    return response.payload === message.id;\n}\n//# sourceMappingURL=publish.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReceivedMessageLifecycle = exports.DashboardMessageBusSubscription = void 0;\nconst errors_1 = require(\"../errors\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst tiny_typed_emitter_1 = require(\"tiny-typed-emitter\");\nconst debug = debug_1.default(`dashboard-message-bus-client:subscribe`);\nclass DashboardMessageBusSubscription extends tiny_typed_emitter_1.TypedEmitter {\n    constructor({ id, type }) {\n        super();\n        this._ended = false;\n        this._predicate = (message) => (id === undefined || message.id === id) &&\n            (type === undefined || message.type === type);\n    }\n    _evaluateMessage({ message, connection }) {\n        if (this._predicate(message)) {\n            const messageLifecycle = new ReceivedMessageLifecycle({\n                message,\n                connection\n            });\n            this.emit(\"message\", messageLifecycle);\n        }\n    }\n    _end() {\n        this._ended = true;\n        this.emit(\"end\");\n        this.removeAllListeners();\n    }\n}\nexports.DashboardMessageBusSubscription = DashboardMessageBusSubscription;\nclass ReceivedMessageLifecycle {\n    constructor({ message, connection }) {\n        this._responded = false;\n        this.message = message;\n        this._connection = connection;\n    }\n    respond({ payload }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._responded) {\n                throw new errors_1.AlreadyRespondedError({ serviceBusMessage: this.message });\n            }\n            this._responded = true;\n            const response = { id: this.message.id, payload };\n            debug(\"Responding to message %s of type '%s' with %o\", this.message.id, this.message.type, response);\n            yield this._connection.send(response);\n        });\n    }\n}\nexports.ReceivedMessageLifecycle = ReceivedMessageLifecycle;\n//# sourceMappingURL=subscribe.js.map","export function classNames(\n  ...classes: (string | boolean | undefined)[]\n): string {\n  return classes.filter(Boolean).join(\" \");\n}\n","import React, { ReactNode } from \"react\";\nimport { classNames } from \"src/functions\";\n\nexport type ButtonColor = \"blue\" | \"red\" | \"brown\" | \"default\";\nexport type ButtonSize = \"xs\" | \"sm\" | \"lg\";\nexport type ButtonVariant = \"outlined\" | \"filled\" | \"empty\";\n\nconst DIMENSIONS = {\n  xs: \"py-1 px-2 h-[28px] !border\",\n  sm: \"py-2 px-2 h-[36px]\",\n  md: \"px-2 h-[52px]\",\n  lg: \"p-2 \"\n};\n\nconst SIZE = {\n  xs: \"text-xs rounded-xl\",\n  sm: \"text-sm rounded-l\",\n  lg: \"text-lg rounded\"\n};\n\nconst FILLED = {\n  default: \"rounded bg-truffle-blue uppercase hover:bg-truffle-light\",\n  blue: \"bg-truffle-blue\",\n  red: \"bg-truffle-red text-truffle-lighter hover:text-black\",\n  brown: \"bg-truffle-brown text-truffle-lighter hover:text-black\"\n};\n\nconst OUTLINED = {\n  default:\n    \"border-2 border-truffle-blue disabled:pointer-events-none disabled:opacity-40\",\n  blue: \"border-none text-truffle-blue bg-truffle-blue bg-opacity-20 hover:bg-truffle-blue hover:bg-opacity-40 focus:bg-truffle-blue focus:bg-opacity-40 active:bg-truffle-blue active:bg-opacity-40\",\n  red: \"border-none text-truffle-red bg-truffle-red bg-opacity-20 hover:bg-truffle-red hover:bg-opacity-40 focus:bg-truffle-red focus:bg-opacity-40 active:bg-truffle-red active:bg-opacity-40\",\n  brown:\n    \"border-none text-truffle-brown bg-truffle-brown bg-opacity-20 hover:bg-truffle-brown hover:bg-opacity-40 focus:bg-truffle-brown focus:bg-opacity-40 active:bg-truffle-brown active:bg-opacity-40\"\n};\n\nconst EMPTY = {\n  default:\n    \"bg-transparent hover:brightness-[90%] focus:brightness-[90%] active:brightness-[80%] disabled:pointer-events-none disabled:opacity-40\",\n  blue: \"text-truffle-blue\",\n  red: \"text-truffle-red\",\n  brown: \"text-truffle-brown\"\n};\n\nconst VARIANT = {\n  outlined: OUTLINED,\n  filled: FILLED,\n  empty: EMPTY\n};\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  startIcon?: ReactNode;\n  endIcon?: ReactNode;\n  color?: ButtonColor;\n  size?: ButtonSize;\n  variant?: ButtonVariant;\n  fullWidth?: boolean;\n  loading?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      children,\n      className = \"\",\n      color = \"blue\",\n      size = \"lg\",\n      variant = \"filled\",\n      startIcon = undefined,\n      endIcon = undefined,\n      fullWidth = false,\n      loading,\n      disabled,\n      ...rest\n    },\n    ref\n  ) => {\n    return (\n      <button\n        {...rest}\n        ref={ref}\n        disabled={disabled || loading}\n        className={classNames(\n          VARIANT[variant][\"default\"],\n          // @ts-ignore TYPE NEEDS FIXING\n          VARIANT[variant][color],\n          // @ts-ignore TYPE NEEDS FIXING\n          SIZE[size],\n          // @ts-ignore TYPE NEEDS FIXING\n          variant !== \"empty\" ? DIMENSIONS[size] : \"\",\n          fullWidth ? \"w-full\" : \"\",\n          \"mx-2\",\n          className\n        )}\n      >\n        <>\n          {startIcon && startIcon}\n          {children}\n          {endIcon && endIcon}\n        </>\n      </button>\n    );\n  }\n);\n\nexport default Button;\n","export const INTERACTIVE_REQUESTS = [\n  \"eth_signTransaction\",\n  \"eth_sendTransaction\",\n  \"eth_decrypt\",\n  \"eth_signTypedData\",\n  \"eth_signTypedData_v1\",\n  \"eth_signTypedData_v3\",\n  \"eth_signTypedData_v4\",\n  \"personal_sign\"\n];\n\nexport const UNSUPPORTED_REQUESTS = [\"eth_sign\"];\n","import axios from \"axios\";\nimport { providers } from \"ethers\";\nimport type { JSONRPCRequestPayload } from \"ethereum-protocol\";\nimport { promisify } from \"util\";\nimport { INTERACTIVE_REQUESTS, UNSUPPORTED_REQUESTS } from \"./constants\";\nimport { DashboardProviderMessage } from \"@truffle/dashboard-message-bus-common\";\nimport { ReceivedMessageLifecycle } from \"@truffle/dashboard-message-bus-client\";\n\nexport const isInteractiveRequest = (\n  request: ReceivedMessageLifecycle<DashboardProviderMessage>\n) => INTERACTIVE_REQUESTS.includes(request.message.payload.method);\n\nexport const isUnsupportedRequest = (\n  request: ReceivedMessageLifecycle<DashboardProviderMessage>\n) => UNSUPPORTED_REQUESTS.includes(request.message.payload.method);\n\nexport const forwardDashboardProviderRequest = async (\n  provider: any,\n  connector: any,\n  payload: JSONRPCRequestPayload\n) => {\n  console.debug(\"forwardDashboardProviderRequest:input\", {\n    id: payload.id,\n    provider,\n    connector,\n    payload\n  });\n  const sendAsync = promisify(provider.sendAsync.bind(provider));\n  try {\n    let result = await sendAsync(payload);\n    let connectorId: string | undefined = connector?.id;\n    console.debug(\"forwardDashboardProviderRequest:result\", {\n      id: payload.id,\n      payload,\n      result\n    });\n    if (connectorId === \"injected\") {\n      // we should get full RPC json payloads returned.\n      return result;\n    } else {\n      // we may just get the result object itself, no RPC wrapper.\n      return {\n        jsonrpc: payload.jsonrpc,\n        id: payload.id,\n        result\n      };\n    }\n  } catch (error) {\n    console.error(error);\n    return {\n      jsonrpc: payload.jsonrpc,\n      id: payload.id,\n      error\n    };\n  }\n};\n\nexport const handleDashboardProviderRequest = async (\n  lifecycle: ReceivedMessageLifecycle<DashboardProviderMessage>,\n  provider: any,\n  connector: any\n) => {\n  const payload = await forwardDashboardProviderRequest(\n    provider,\n    connector,\n    lifecycle.message.payload\n  );\n  return lifecycle.respond({ payload });\n};\n\nexport const respondToUnsupportedRequest = async (\n  lifecycle: ReceivedMessageLifecycle<DashboardProviderMessage>\n) => {\n  const defaultMessage = `Method \"${lifecycle.message.payload.method}\" is unsupported by @truffle/dashboard`;\n  const customMessages: { [index: string]: string } = {\n    eth_sign:\n      'Method \"eth_sign\" is unsupported by @truffle/dashboard, please use \"personal_sign\" instead'\n  };\n\n  const message =\n    customMessages[lifecycle.message.payload.method] ?? defaultMessage;\n  const code = 4001;\n\n  const payload = {\n    jsonrpc: lifecycle.message.payload.jsonrpc,\n    id: lifecycle.message.payload.id,\n    error: { code, message }\n  };\n\n  return lifecycle.respond({ payload });\n};\n\nexport const getNetworkName = async (chainId: number) => {\n  const { data: chainList } = await axios.get(\n    \"https://chainid.network/chains.json\"\n  );\n  const [chain] = chainList.filter((chain: any) => chain.chainId === chainId);\n  if (!chain) return `Chain ID ${chainId}`;\n  return chain.name;\n};\n\nexport const getDisplayName = async (\n  provider: providers.BaseProvider,\n  address: string\n) => {\n  const ensName = await reverseLookup(provider, address);\n  const shortenedAccount = shortenAddress(address);\n  return ensName ?? shortenedAccount;\n};\n\nexport const reverseLookup = async (\n  provider: providers.BaseProvider,\n  address: string\n) => {\n  try {\n    return await provider.lookupAddress(address);\n  } catch {\n    return undefined;\n  }\n};\n\nexport const shortenAddress = (address: string) => {\n  return `${address.slice(0, 6)}...${address.slice(-4)}`;\n};\n","import { useEffect, useState } from \"react\";\nimport { getNetworkName } from \"src/utils/utils\";\n\ninterface Props {\n  chainId: number;\n}\n\nfunction NetworkIndicator({ chainId }: Props) {\n  const [networkName, setNetworkName] = useState<string>(`Chain ID ${chainId}`);\n  const textColor = chainId === 1 ? \"text-truffle-red\" : \"\";\n\n  useEffect(() => {\n    const updateNetwork = async (chainId: number) => {\n      const connectedNetworkName = await getNetworkName(chainId);\n      setNetworkName(connectedNetworkName);\n    };\n\n    if (!chainId) return;\n    updateNetwork(chainId);\n  }, [chainId]);\n\n  return <div className={`rounded uppercase ${textColor}`}>{networkName}</div>;\n}\n\nexport default NetworkIndicator;\n","import type { ReactNode } from \"react\";\n\ninterface Props {\n  header?: string | ReactNode;\n  body?: string | ReactNode | ReactNode[];\n  footer?: string | ReactNode;\n}\n\nfunction Card({ header, body, footer }: Props) {\n  const headerOrNull = header && (\n    <div className=\"border-b border-grey py-3 mx-3\">\n      <h2 className=\"text-center uppercase\">{header}</h2>\n    </div>\n  );\n\n  const bodyOrNull = body && <div className=\"p-3 overflow-auto\">{body}</div>;\n\n  const footerOrNull = footer && (\n    <div className=\"border-t border-grey py-3 mx-3\">{footer}</div>\n  );\n\n  return (\n    <div className=\"border-grey border rounded bg-white w-full\">\n      {headerOrNull}\n      {bodyOrNull}\n      {footerOrNull}\n    </div>\n  );\n}\n\nexport default Card;\n","import Button from \"src/components/common/Button\";\nimport NetworkIndicator from \"src/components/common/NetworkIndicator\";\nimport Card from \"src/components/common/Card\";\n\ninterface Props {\n  confirm: () => void;\n  newChainId: number;\n  previousChainId: number;\n}\n\nfunction ConfirmNetworkChanged({\n  confirm,\n  newChainId,\n  previousChainId\n}: Props) {\n  const confirmBody = (\n    <div className=\"flex flex-col gap-2\">\n      <div>\n        We detected that your connected network changed. Please confirm that\n        this was your intention or switch back to the previous network.\n      </div>\n      <div>Your previous connected network was:</div>\n      <div className=\"flex justify-center\">\n        <NetworkIndicator chainId={previousChainId} />\n      </div>\n      <div>Your new connected network is:</div>\n      <div className=\"flex justify-center\">\n        <NetworkIndicator chainId={newChainId} />\n      </div>\n    </div>\n  );\n\n  const confirmButton = <Button onClick={confirm}>Confirm</Button>;\n\n  return (\n    <div className=\"flex justify-center items-center py-20\">\n      <div className=\"mx-3 w-3/4 max-w-4xl h-2/3 text-center\">\n        <Card\n          header=\"Confirm Network Changed\"\n          body={confirmBody}\n          footer={confirmButton}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default ConfirmNetworkChanged;\n","import { providers } from \"ethers\";\nimport { useEffect, useState } from \"react\";\nimport { getDisplayName } from \"src/utils/utils\";\nimport NetworkIndicator from \"src/components/common/NetworkIndicator\";\nimport { useAccount, useConnect, useNetwork } from \"wagmi\";\nimport Button from \"../common/Button\";\n\ninterface Props {\n  disconnect: () => void;\n}\n\nfunction Header({ disconnect }: Props) {\n  const [displayName, setDisplayName] = useState<string>();\n\n  const [{ data: accountData }] = useAccount();\n  const [{ data: networkData }] = useNetwork();\n  const [{ data: connectData }] = useConnect();\n\n  useEffect(() => {\n    const updateAccountDisplay = async (\n      provider: providers.Web3Provider,\n      address: string\n    ) => {\n      setDisplayName(await getDisplayName(provider, address));\n    };\n\n    if (!connectData.connected) {\n      setDisplayName(undefined);\n    }\n\n    if (!connectData || !accountData) return;\n    updateAccountDisplay(\n      connectData.connector?.getProvider(),\n      accountData.address\n    );\n  }, [connectData, accountData]);\n\n  return (\n    <header className=\"grid grid-cols-2 py-2 px-4 border-b-2 border-truffle-light text-md uppercase\">\n      <div className=\"flex justify-start items-center\">\n        <span className=\"inline-flex items-center gap-3\">\n          <img\n            src={\"/truffle-logomark.svg\"}\n            width=\"32px\"\n            alt={\"Truffle Logo\"}\n          />\n          Truffle Dashboard\n        </span>\n      </div>\n      <div className=\"flex justify-end items-center gap-4 text-md\">\n        {networkData.chain?.id && (\n          <NetworkIndicator chainId={networkData.chain.id} />\n        )}\n        {networkData.chain?.id && (\n          <Button onClick={disconnect} size={\"sm\"} color={\"red\"}>\n            disconnect\n          </Button>\n        )}\n        <div>{displayName}</div>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import ReactJson from \"react-json-view\";\nimport { DashboardProviderMessage } from \"@truffle/dashboard-message-bus-common\";\nimport { ReceivedMessageLifecycle } from \"@truffle/dashboard-message-bus-client\";\nimport { handleDashboardProviderRequest } from \"../../utils/utils\";\nimport Button from \"../common/Button\";\nimport Card from \"../common/Card\";\nimport { useState } from \"react\";\n\ninterface Props {\n  request: ReceivedMessageLifecycle<DashboardProviderMessage>;\n  setRequests: (\n    requests:\n      | ReceivedMessageLifecycle<DashboardProviderMessage>[]\n      | ((\n          requests: ReceivedMessageLifecycle<DashboardProviderMessage>[]\n        ) => ReceivedMessageLifecycle<DashboardProviderMessage>[])\n  ) => void;\n  provider: any;\n  connector: any;\n}\n\nfunction IncomingRequest({ provider, connector, request, setRequests }: Props) {\n  const [disable, setDisable] = useState(false);\n  const removeFromRequests = () => {\n    setRequests(previousRequests =>\n      previousRequests.filter(other => other.message.id !== request.message.id)\n    );\n  };\n\n  const process = async () => {\n    setDisable(true);\n    await handleDashboardProviderRequest(request, provider, connector);\n    removeFromRequests();\n  };\n\n  const reject = async () => {\n    const payload = {\n      jsonrpc: request.message.payload.jsonrpc,\n      id: request.message.payload.id,\n      error: {\n        code: 4001,\n        message: \"User rejected @truffle/dashboard request\"\n      }\n    };\n\n    request.respond({ payload });\n    removeFromRequests();\n  };\n\n  const formatDashboardProviderRequestParameters = (\n    request: DashboardProviderMessage\n  ) => {\n    switch (request.payload.method) {\n      case \"eth_sendTransaction\":\n      case \"eth_signTransaction\": {\n        const [transaction] = request.payload.params;\n        return <ReactJson name=\"transaction\" src={transaction as any} />;\n      }\n      case \"eth_signTypedData_v1\":\n      case \"eth_signTypedData\": {\n        const [messageParams, from] = request.payload.params;\n        return (\n          <div>\n            <div>Account: {from}</div>\n            <div className=\"flex gap-2\">\n              <div>Message:</div>\n              <ReactJson name=\"message params\" src={messageParams} />\n            </div>\n          </div>\n        );\n      }\n      case \"eth_signTypedData_v3\":\n      case \"eth_signTypedData_v4\": {\n        const [from, messageParams] = request.payload.params;\n        const { message } = JSON.parse(messageParams);\n        return (\n          <div>\n            <div>Account: {from}</div>\n            <div className=\"flex gap-2\">\n              <div>Message:</div>\n              <ReactJson name=\"message\" src={message} />\n            </div>\n          </div>\n        );\n      }\n      case \"personal_sign\": {\n        const [message, from] = request.payload.params;\n        return (\n          <div>\n            <div>Account: {from}</div>\n            <div className=\"flex gap-2\">\n              <div>Message:</div>\n              <div>{message}</div>\n            </div>\n          </div>\n        );\n      }\n      case \"eth_decrypt\":\n      default: {\n        return <ReactJson src={request.payload.params} />;\n      }\n    }\n  };\n\n  const header = (\n    <div className=\"normal-case\">{request.message.payload.method}</div>\n  );\n\n  const body = (\n    <div>{formatDashboardProviderRequestParameters(request.message)}</div>\n  );\n\n  const footer = disable ? (\n    <div className=\"flex justify-start items-center gap-2\">\n      <Button disabled onClick={() => {}}>\n        Processing...\n      </Button>\n    </div>\n  ) : (\n    <div className=\"flex justify-start items-center gap-2\">\n      <Button\n        onClick={() => {\n          process();\n          setDisable(true);\n        }}\n      >\n        Process\n      </Button>\n      <Button onClick={reject}>Reject</Button>\n    </div>\n  );\n\n  return (\n    <div key={request.message.id} className=\"flex justify-center items-center\">\n      <Card header={header} body={body} footer={footer} />\n    </div>\n  );\n}\n\nexport default IncomingRequest;\n","import { useEffect } from \"react\";\nimport {\n  handleDashboardProviderRequest,\n  isInteractiveRequest,\n  isUnsupportedRequest,\n  respondToUnsupportedRequest\n} from \"src/utils/utils\";\nimport Card from \"src/components/common/Card\";\nimport IncomingRequest from \"./IncomingRequest\";\nimport type { DashboardProviderMessage } from \"@truffle/dashboard-message-bus-common\";\nimport { useConnect } from \"wagmi\";\nimport { ReceivedMessageLifecycle } from \"@truffle/dashboard-message-bus-client\";\n\ninterface Props {\n  paused: boolean;\n  requests: ReceivedMessageLifecycle<DashboardProviderMessage>[];\n  setRequests: (\n    requests:\n      | ReceivedMessageLifecycle<DashboardProviderMessage>[]\n      | ((\n          requests: ReceivedMessageLifecycle<DashboardProviderMessage>[]\n        ) => ReceivedMessageLifecycle<DashboardProviderMessage>[])\n  ) => void;\n}\n\nfunction DashboardProvider({ paused, requests, setRequests }: Props) {\n  const [{ data: connectData }] = useConnect();\n  const provider = connectData.connector?.getProvider();\n  const connector = connectData.connector;\n\n  useEffect(() => {\n    const removeFromRequests = (id: number) => {\n      setRequests(previousRequests =>\n        previousRequests.filter(request => request.message.id !== id)\n      );\n    };\n\n    if (!connectData.connected || !provider) return;\n    if (paused) return;\n\n    // Automatically respond with an error for unsupported requests\n    requests.filter(isUnsupportedRequest).forEach(request => {\n      respondToUnsupportedRequest(request);\n      removeFromRequests(request.message.id);\n    });\n\n    // Automatically handle all non-interactive requests\n    requests\n      .filter(\n        request =>\n          !isInteractiveRequest(request) && !isUnsupportedRequest(request)\n      )\n      .forEach(request => {\n        handleDashboardProviderRequest(request, provider, connector);\n        removeFromRequests(request.message.id);\n      });\n  }, [paused, requests, setRequests, connectData, provider, connector]);\n\n  const incomingRequests =\n    connectData.connected && provider\n      ? requests\n          .filter(isInteractiveRequest)\n          .map(request => (\n            <IncomingRequest\n              request={request}\n              setRequests={setRequests}\n              provider={provider}\n              connector={connector}\n            />\n          ))\n      : [];\n\n  return (\n    <div className=\"flex justify-center items-center py-20\">\n      <div className=\"mx-3 w-3/4 max-w-4xl h-2/3\">\n        <Card header=\"Incoming Requests\" body={incomingRequests} />\n      </div>\n    </div>\n  );\n}\n\nexport default DashboardProvider;\n","import { useConnect, useNetwork } from \"wagmi\";\nimport Button from \"src/components/common/Button\";\nimport NetworkIndicator from \"src/components/common/NetworkIndicator\";\nimport Card from \"src/components/common/Card\";\n\ninterface Props {\n  confirm: () => void;\n}\n\nfunction ConnectNetwork({ confirm }: Props) {\n  const [{ data: connectData }, connect] = useConnect();\n  const [{ data: networkData }] = useNetwork();\n\n  const chainId = networkData.chain?.id;\n  const connectBody =\n    \"Please connect your wallet to use the Truffle Dashboard Provider.\";\n\n  const connectButton = (\n    <div>\n      {connectData.connectors.map(connector => (\n        <Button key={connector.id} onClick={() => connect(connector)}>\n          {connector.name}\n        </Button>\n      ))}\n    </div>\n  );\n\n  const confirmBody = chainId && (\n    <div className=\"flex flex-col gap-2\">\n      <div>\n        Please confirm you're connected to the right network (or switch to the\n        right one) before continuing.\n      </div>\n      <div className=\"flex justify-center\">\n        <NetworkIndicator chainId={chainId} />\n      </div>\n    </div>\n  );\n  const confirmButton = <Button onClick={confirm}>Confirm</Button>;\n  return (\n    <div className=\"flex justify-center items-center py-20\">\n      <div className=\"mx-3 w-3/4 max-w-4xl h-2/3 text-center\">\n        {chainId === undefined ? (\n          <Card\n            header=\"Connect Wallet\"\n            body={connectBody}\n            footer={connectButton}\n          />\n        ) : (\n          <Card\n            header=\"Connect Wallet\"\n            body={confirmBody}\n            footer={confirmButton}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ConnectNetwork;\n","import { useEffect, useState } from \"react\";\nimport { useAccount, useConnect, useNetwork } from \"wagmi\";\nimport ConfirmNetworkChanged from \"./components/ConfirmNetworkChange\";\nimport Header from \"./components/header/Header\";\nimport DashboardProvider from \"./components/dashboardprovider\";\nimport ConnectNetwork from \"./components/ConnectNetwork\";\nimport {\n  DashboardProviderMessage,\n  isDashboardProviderMessage,\n  isDebugMessage,\n  isInvalidateMessage,\n  isLogMessage,\n  Message\n} from \"@truffle/dashboard-message-bus-common\";\nimport {\n  DashboardMessageBusClient,\n  ReceivedMessageLifecycle\n} from \"@truffle/dashboard-message-bus-client\";\n\nfunction Dashboard() {\n  const [paused, setPaused] = useState<boolean>(false);\n  const [connectedChainId, setConnectedChainId] = useState<\n    number | undefined\n  >();\n  const [chainId, setChainId] = useState<number>();\n  const [client, setClient] = useState<DashboardMessageBusClient | undefined>();\n  const [dashboardProviderRequests, setDashboardProviderRequests] = useState<\n    ReceivedMessageLifecycle<DashboardProviderMessage>[]\n  >([]);\n\n  const [{ data }] = useNetwork();\n  const [{}, disconnect] = useAccount();\n  const [{ data: connectData }] = useConnect();\n\n  useEffect(() => {\n    setChainId(chainId);\n\n    if (!chainId || !client) {\n      return;\n    }\n\n    if (connectedChainId) {\n      if (connectedChainId !== chainId) {\n        setPaused(true);\n      }\n      if (connectedChainId === chainId) {\n        setPaused(false);\n      }\n    } else {\n      setConnectedChainId(chainId);\n    }\n  }, [data, connectData, client, chainId, connectedChainId]);\n\n  const initializeSocket = async () => {\n    if (client) {\n      await client.ready();\n      return;\n    }\n\n    const host = window.location.hostname;\n    const port =\n      process.env.NODE_ENV === \"development\"\n        ? 24012\n        : Number(window.location.port);\n\n    const c = new DashboardMessageBusClient({\n      host,\n      port\n    });\n\n    await c.ready();\n    console.debug(`Connected to message bus at ws://${host}:${port}`);\n\n    const subscription = c.subscribe({});\n\n    subscription.on(\n      \"message\",\n      (lifecycle: ReceivedMessageLifecycle<Message>) => {\n        const message = lifecycle.message;\n\n        if (isDashboardProviderMessage(message)) {\n          console.debug(`received provider message`, message);\n          setDashboardProviderRequests(previousRequests => [\n            ...previousRequests,\n            lifecycle as ReceivedMessageLifecycle<DashboardProviderMessage>\n          ]);\n        } else if (isInvalidateMessage(message)) {\n          console.debug(`received invalidate message `, message);\n          setDashboardProviderRequests(previousRequests =>\n            previousRequests.filter(\n              request => request.message.id !== message.payload\n            )\n          );\n        } else if (isDebugMessage(message)) {\n          console.debug(`received invalidate message `, message);\n          const { payload } = message;\n          console.log(payload.message);\n\n          lifecycle.respond({ payload: undefined });\n        } else if (isLogMessage(message)) {\n          console.debug(`received log message `, message);\n          const { payload } = message;\n          console.log(payload.message);\n\n          lifecycle.respond({ payload: undefined });\n        }\n      }\n    );\n\n    setClient(c);\n  };\n\n  const disconnectAccount = () => {\n    console.debug(`Disconnecting`);\n    // turn everything off.\n    disconnect();\n    setConnectedChainId(undefined);\n    setPaused(false);\n    client?.close();\n    setClient(undefined);\n  };\n\n  return (\n    <div className=\"h-full min-h-screen bg-gradient-to-b from-truffle-lighter to-truffle-light\">\n      <Header disconnect={disconnectAccount} />\n      {paused && chainId && connectedChainId && (\n        <ConfirmNetworkChanged\n          newChainId={chainId}\n          previousChainId={connectedChainId}\n          confirm={() => setConnectedChainId(chainId)}\n        />\n      )}\n      {!paused && !client && <ConnectNetwork confirm={initializeSocket} />}\n      {!paused && client && (\n        <DashboardProvider\n          paused={paused}\n          requests={dashboardProviderRequests}\n          setRequests={setDashboardProviderRequests}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Dashboard;\n","import Dashboard from \"./Dashboard\";\n\nimport { Provider, chain, defaultChains, Connector } from \"wagmi\";\nimport { InjectedConnector } from \"wagmi/connectors/injected\";\n\nimport { getDefaultProvider, providers as ethproviders } from \"ethers\";\nimport { getNetwork } from \"@ethersproject/providers\";\n\nconst defaultChain = chain.mainnet;\n\nconst getProvider = (_config: { chainId?: number; connector?: Connector }) => {\n  let wProvider = _config.connector?.getProvider(true);\n  console.debug(\"getProvider\", {\n    wProvider,\n    winEth: window.ethereum,\n    _config\n  });\n  let ret: any;\n  if (!wProvider) {\n    ret = getDefaultProvider(getNetwork(_config.chainId ?? defaultChain.id));\n  } else {\n    wProvider\n      .enable()\n      .then((r: any) => console.debug(r))\n      .catch((e: any) => console.error(e));\n    ret = new ethproviders.Web3Provider(wProvider);\n  }\n  console.debug(\"getProvider.returning\", {\n    wProvider,\n    winEth: window.ethereum,\n    ret\n  });\n  return ret;\n};\n\nconst connectors = [new InjectedConnector({ chains: defaultChains })];\n\nfunction App() {\n  return (\n    <Provider connectors={connectors} provider={getProvider}>\n      <Dashboard />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}