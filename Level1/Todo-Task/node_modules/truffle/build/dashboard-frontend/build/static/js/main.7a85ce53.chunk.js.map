{"version":3,"sources":["../../../lib/DashboardMessageBus.ts","../../../lib/index.ts","../../../lib/types.ts","../../../../lib/message/types.ts","utils/constants.ts","utils/utils.ts","components/common/NetworkIndicator.tsx","components/Header/Header.tsx","components/common/Card.tsx","components/common/Button.tsx","components/DashboardProvider/IncomingRequest.tsx","components/DashboardProvider/DashboardProvider.tsx","components/ConnectNetwork.tsx","components/ConfirmNetworkChange.tsx","Dashboard.tsx","App.tsx","index.tsx","../../../lib/utils.ts"],"names":["INTERACTIVE_REQUESTS","UNSUPPORTED_REQUESTS","getPorts","a","dashboardHost","window","location","hostname","dashboardPort","Number","port","getMessageBusPorts","isInteractiveRequest","request","includes","payload","method","isUnsupportedRequest","forwardDashboardProviderRequest","provider","sendAsync","promisify","bind","response","jsonrpc","id","error","handleDashboardProviderRequest","responseSocket","responsePayload","respond","socket","console","debug","encodedResponse","jsonToBase64","send","getLibrary","providers","Web3Provider","getNetworkName","chainId","axios","get","chainList","data","filter","chain","name","getDisplayName","library","address","reverseLookup","ensName","shortenedAccount","shortenAddress","displayName","lookupAddress","undefined","slice","NetworkIndicator","useState","networkName","setNetworkName","textColor","useEffect","updateNetwork","connectedNetworkName","log","className","Header","setDisplayName","useWeb3React","account","updateAccountDisplay","src","width","Card","header","body","footer","headerOrNull","bodyOrNull","footerOrNull","Button","disabled","onClick","text","IncomingRequest","setRequests","disable","setDisable","removeFromRequests","previousRequests","other","process","reject","errorResponse","code","message","transaction","params","messageParams","from","JSON","parse","formatDashboardProviderRequestParameters","DashboardProvider","paused","requests","forEach","defaultMessage","eth_sign","respondToUnsupportedRequest","incomingRequests","map","ConnectNetwork","confirm","activate","injectedConnector","InjectedConnector","connectButton","confirmBody","confirmButton","ConfirmNetworkChanged","newChainId","previousChainId","Dashboard","setPaused","connectedChainId","setConnectedChainId","setSocket","dashboardProviderRequests","setDashboardProviderRequests","initializeSocket","readyState","WebSocket","OPEN","messageBusHost","subscribePort","connectToMessageBusWithRetries","connectedSocket","addEventListener","event","toString","base64ToJson","isDashboardProviderMessage","isInvalidateMessage","ConfirmNetworkChange","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a85ce53.chunk.js","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DashboardMessageBus = void 0;\nconst delay_1 = __importDefault(require(\"delay\"));\nconst events_1 = require(\"events\");\nconst utils_1 = require(\"./utils\");\nconst util_1 = require(\"util\");\nclass DashboardMessageBus extends events_1.EventEmitter {\n    constructor(publishPort, subscribePort, host = \"localhost\") {\n        super();\n        this.publishPort = publishPort;\n        this.subscribePort = subscribePort;\n        this.host = host;\n        this.publishers = [];\n        this.subscribers = [];\n        this.unfulfilledRequests = new Map([]);\n    }\n    /**\n     * Start the DashboardMessageBus\n     * @dev This starts separate websocket servers for subscribers/publishers\n     */\n    start() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.subscribeServer = yield utils_1.startWebSocketServer({\n                host: this.host,\n                port: this.subscribePort\n            });\n            this.subscribeServer.on(\"connection\", (newSubscriber) => {\n                newSubscriber.on(\"close\", () => {\n                    this.removeSubscriber(newSubscriber);\n                });\n                // Require the subscriber to send a message *first* before being added\n                newSubscriber.once(\"message\", () => this.addSubscriber(newSubscriber));\n            });\n            this.publishServer = yield utils_1.startWebSocketServer({\n                host: this.host,\n                port: this.publishPort\n            });\n            this.publishServer.on(\"connection\", (newPublisher) => {\n                newPublisher.on(\"close\", () => {\n                    this.removePublisher(newPublisher);\n                });\n                this.addPublisher(newPublisher);\n            });\n        });\n    }\n    /**\n     * Wait for the message bus to be \"ready\" to process requests (i.e. having any subscribers).\n     * @dev Polls every second to see if the number of subscribers > 0\n     */\n    ready() {\n        return __awaiter(this, void 0, void 0, function* () {\n            while (this.subscribers.length === 0) {\n                yield delay_1.default(1000);\n            }\n        });\n    }\n    /**\n     * Close both websocket servers\n     * @dev Emits a \"terminate\" event\n     */\n    terminate() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield util_1.promisify(this.publishServer.close.bind(this.publishServer))();\n            yield util_1.promisify(this.subscribeServer.close.bind(this.subscribeServer))();\n            this.emit(\"terminate\");\n        });\n    }\n    /**\n     * Process a message `data` coming from `publisher` by sending it to `subscribers`\n     * and return the first received response to the `publisher`\n     */\n    processRequest(publisher, data, subscribers) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // convert to string for uniformity since WebSocket.Data can take other forms\n            if (typeof data !== \"string\") {\n                data = data.toString();\n            }\n            yield this.ready();\n            this.unfulfilledRequests.set(data, { publisher, data });\n            const message = utils_1.base64ToJson(data);\n            try {\n                this.logToPublishers(`Sending message to ${subscribers.length} subscribers`, \"requests\");\n                this.logToPublishers(message, \"requests\");\n                const response = yield utils_1.broadcastAndAwaitFirst(subscribers, message);\n                this.logToPublishers(`Sending response for message ${message.id}`, \"responses\");\n                this.logToPublishers(response, \"responses\");\n                const encodedResponse = utils_1.jsonToBase64(response);\n                publisher.send(encodedResponse);\n                this.unfulfilledRequests.delete(data);\n                this.invalidateMessage(message.id);\n            }\n            catch (error) {\n                this.logToPublishers(`An error occurred while processing message ${message.id}`, \"errors\");\n                this.logToPublishers(error, \"errors\");\n            }\n        });\n    }\n    invalidateMessage(id) {\n        const invalidationMessage = utils_1.createMessage(\"invalidate\", id);\n        utils_1.broadcastAndDisregard(this.subscribers, invalidationMessage);\n    }\n    logToPublishers(logMessage, namespace) {\n        this.logTo(logMessage, this.publishers, namespace);\n    }\n    logToSubscribers(logMessage, namespace) {\n        this.logTo(logMessage, this.subscribers, namespace);\n    }\n    logToAll(logMessage, namespace) {\n        this.logToPublishers(logMessage, namespace);\n        this.logToSubscribers(logMessage, namespace);\n    }\n    logTo(logMessage, receivers, namespace) {\n        const payload = {\n            namespace: \"dashboard-message-bus\",\n            message: logMessage\n        };\n        if (namespace) {\n            payload.namespace += `:${namespace}`;\n        }\n        const message = utils_1.createMessage(\"log\", payload);\n        utils_1.broadcastAndDisregard(receivers, message);\n    }\n    /**\n     * Add a publisher so it can be used to send requests to\n     * @dev Also sends all backlogged (unfulfilled) requests upon connection\n     */\n    addSubscriber(newSubscriber) {\n        this.unfulfilledRequests.forEach(({ publisher, data }) => this.processRequest(publisher, data, [newSubscriber]));\n        this.logToPublishers(\"Subscriber connected\", \"connections\");\n        this.subscribers.push(newSubscriber);\n    }\n    /**\n     * Remove a subscriber\n     * @dev Will cause the server to terminate if this was the last connection\n     */\n    removeSubscriber(subscriberToRemove) {\n        this.logToPublishers(\"Subscriber disconnected\", \"connections\");\n        this.subscribers = this.subscribers.filter(subscriber => subscriber !== subscriberToRemove);\n        this.terminateIfNoConnections();\n    }\n    /**\n     * Add a publisher and set up message listeners to process their requests\n     */\n    addPublisher(newPublisher) {\n        this.logToPublishers(\"Publisher connected\", \"connections\");\n        newPublisher.on(\"message\", (data) => {\n            this.processRequest(newPublisher, data, this.subscribers);\n        });\n        this.publishers.push(newPublisher);\n    }\n    /**\n     * Remove a publisher and their corresponding requests\n     * @dev Will cause the server to terminate if this was the last connection\n     */\n    removePublisher(publisherToRemove) {\n        this.logToPublishers(\"Publisher disconnected\", \"connections\");\n        this.publishers = this.publishers.filter(publisher => publisher !== publisherToRemove);\n        this.clearRequestsForPublisher(publisherToRemove);\n        this.terminateIfNoConnections();\n    }\n    terminateIfNoConnections() {\n        if (this.publishers.length === 0 && this.subscribers.length === 0) {\n            this.terminate();\n        }\n    }\n    clearRequestsForPublisher(publisher) {\n        this.unfulfilledRequests.forEach(({ publisher: requestPublisher }, key) => {\n            if (requestPublisher === publisher) {\n                this.unfulfilledRequests.delete(key);\n            }\n        });\n    }\n}\nexports.DashboardMessageBus = DashboardMessageBus;\n//# sourceMappingURL=DashboardMessageBus.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./DashboardMessageBus\"), exports);\n__exportStar(require(\"./utils\"), exports);\n__exportStar(require(\"./types\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./message/types\"), exports);\n//# sourceMappingURL=types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isInvalidateMessage = exports.isLogMessage = exports.isDashboardProviderMessage = void 0;\nconst isDashboardProviderMessage = (message) => {\n    return message.type === \"provider\";\n};\nexports.isDashboardProviderMessage = isDashboardProviderMessage;\nconst isLogMessage = (message) => {\n    return message.type === \"log\";\n};\nexports.isLogMessage = isLogMessage;\nconst isInvalidateMessage = (message) => {\n    return message.type === \"invalidate\";\n};\nexports.isInvalidateMessage = isInvalidateMessage;\n//# sourceMappingURL=types.js.map","export const INTERACTIVE_REQUESTS = [\n  \"eth_signTransaction\",\n  \"eth_sendTransaction\",\n  \"eth_decrypt\",\n  \"eth_signTypedData\",\n  \"eth_signTypedData_v1\",\n  \"eth_signTypedData_v3\",\n  \"eth_signTypedData_v4\",\n  \"personal_sign\"\n];\n\nexport const UNSUPPORTED_REQUESTS = [\"eth_sign\"];\n","import WebSocket from \"isomorphic-ws\";\nimport {\n  DashboardProviderMessage,\n  getMessageBusPorts,\n  jsonToBase64,\n  PortsConfig\n} from \"@truffle/dashboard-message-bus\";\nimport axios from \"axios\";\nimport { providers } from \"ethers\";\nimport type { JSONRPCRequestPayload } from \"ethereum-protocol\";\nimport { promisify } from \"util\";\nimport { INTERACTIVE_REQUESTS, UNSUPPORTED_REQUESTS } from \"./constants\";\n\nexport const getPorts = async (): Promise<PortsConfig> => {\n  const dashboardHost = window.location.hostname;\n  const dashboardPort =\n    process.env.NODE_ENV === \"development\"\n      ? 24012\n      : Number(window.location.port);\n  return getMessageBusPorts(dashboardPort, dashboardHost);\n};\n\nexport const isInteractiveRequest = (request: DashboardProviderMessage) =>\n  INTERACTIVE_REQUESTS.includes(request.payload.method);\n\nexport const isUnsupportedRequest = (request: DashboardProviderMessage) =>\n  UNSUPPORTED_REQUESTS.includes(request.payload.method);\n\nexport const forwardDashboardProviderRequest = async (\n  provider: any,\n  payload: JSONRPCRequestPayload\n) => {\n  const sendAsync = promisify(provider.sendAsync.bind(provider));\n  try {\n    const response = await sendAsync(payload);\n    return response;\n  } catch (error) {\n    return {\n      jsonrpc: payload.jsonrpc,\n      id: payload.id,\n      error\n    };\n  }\n};\n\nexport const handleDashboardProviderRequest = async (\n  request: DashboardProviderMessage,\n  provider: any,\n  responseSocket: WebSocket\n) => {\n  const responsePayload = await forwardDashboardProviderRequest(\n    provider,\n    request.payload\n  );\n  const response = {\n    id: request.id,\n    payload: responsePayload\n  };\n\n  respond(response, responseSocket);\n};\n\nexport const respondToUnsupportedRequest = (\n  request: DashboardProviderMessage,\n  responseSocket: WebSocket\n) => {\n  const defaultMessage = `Method \"${request.payload.method}\" is unsupported by @truffle/dashboard`;\n  const customMessages: { [index: string]: string } = {\n    eth_sign:\n      'Method \"eth_sign\" is unsupported by @truffle/dashboard, please use \"personal_sign\" instead'\n  };\n\n  const message = customMessages[request.payload.method] ?? defaultMessage;\n  const code = 4001;\n\n  const errorResponse = {\n    id: request.id,\n    payload: {\n      jsonrpc: request.payload.jsonrpc,\n      id: request.payload.id,\n      error: { code, message }\n    }\n  };\n\n  respond(errorResponse, responseSocket);\n};\n\nexport const respond = (response: any, socket: WebSocket) => {\n  console.debug(\"Sending response\", response);\n  const encodedResponse = jsonToBase64(response);\n  socket.send(encodedResponse);\n};\n\nexport const getLibrary = (provider: any) =>\n  new providers.Web3Provider(provider);\n\nexport const getNetworkName = async (chainId: number) => {\n  const { data: chainList } = await axios.get(\n    \"https://chainid.network/chains.json\"\n  );\n  const [chain] = chainList.filter((chain: any) => chain.chainId === chainId);\n  if (!chain) return `Chain ID ${chainId}`;\n  return chain.name;\n};\n\nexport const getDisplayName = async (\n  library: providers.Web3Provider,\n  address: string\n) => {\n  const ensName = await reverseLookup(library, address);\n  const shortenedAccount = shortenAddress(address);\n  const displayName = ensName ?? shortenedAccount;\n  return displayName;\n};\n\nexport const reverseLookup = async (\n  library: providers.Web3Provider,\n  address: string\n) => {\n  try {\n    return await library.lookupAddress(address);\n  } catch {\n    return undefined;\n  }\n};\n\nexport const shortenAddress = (address: string) => {\n  return `${address.slice(0, 6)}...${address.slice(-4)}`;\n};\n","import { useEffect, useState } from \"react\";\nimport { getNetworkName } from \"src/utils/utils\";\n\ninterface Props {\n  chainId: number;\n}\n\nfunction NetworkIndicator({ chainId }: Props) {\n  const [networkName, setNetworkName] = useState<string>(`Chain ID ${chainId}`);\n  const textColor = chainId === 1 ? \"text-truffle-red\" : \"\";\n\n  useEffect(() => {\n    const updateNetwork = async (chainId: number) => {\n      const connectedNetworkName = await getNetworkName(chainId);\n      setNetworkName(connectedNetworkName);\n      console.log(connectedNetworkName);\n    };\n\n    if (!chainId) return;\n    updateNetwork(chainId);\n  }, [chainId]);\n\n  return <div className={`rounded uppercase ${textColor}`}>{networkName}</div>;\n}\n\nexport default NetworkIndicator;\n","import { useWeb3React } from \"@web3-react/core\";\nimport { providers } from \"ethers\";\nimport { useEffect, useState } from \"react\";\nimport { getDisplayName } from \"../../utils/utils\";\nimport NetworkIndicator from \"../common/NetworkIndicator\";\n\ninterface Props {}\n\nfunction Header({}: Props) {\n  const [displayName, setDisplayName] = useState<string>();\n  const { account, library, chainId } = useWeb3React<providers.Web3Provider>();\n\n  useEffect(() => {\n    const updateAccountDisplay = async (\n      library: providers.Web3Provider,\n      account: string\n    ) => {\n      setDisplayName(await getDisplayName(library, account));\n    };\n\n    if (!library || !account) return;\n    updateAccountDisplay(library, account);\n  }, [library, account]);\n\n  return (\n    <header className=\"grid grid-cols-2 py-2 px-4 border-b-2 border-truffle-light text-md uppercase\">\n      <div className=\"flex justify-start items-center\">\n        <span className=\"inline-flex items-center gap-3\">\n          <img src=\"/truffle-logomark.svg\" width=\"32px\" />\n          Truffle Dashboard\n        </span>\n      </div>\n      <div className=\"flex justify-end items-center gap-4 text-md\">\n        {chainId && <NetworkIndicator chainId={chainId} />}\n        <div>{displayName}</div>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import type { ReactNode } from \"react\";\n\ninterface Props {\n  header?: string | ReactNode;\n  body?: string | ReactNode | ReactNode[];\n  footer?: string | ReactNode;\n}\n\nfunction Card({ header, body, footer }: Props) {\n  const headerOrNull = header && (\n    <div className=\"border-b border-grey py-3 mx-3\">\n      <h2 className=\"text-center uppercase\">{header}</h2>\n    </div>\n  );\n\n  const bodyOrNull = body && <div className=\"p-3 overflow-auto\">{body}</div>;\n\n  const footerOrNull = footer && (\n    <div className=\"border-t border-grey py-3 mx-3\">{footer}</div>\n  );\n\n  return (\n    <div className=\"border-grey border rounded bg-white w-full\">\n      {headerOrNull}\n      {bodyOrNull}\n      {footerOrNull}\n    </div>\n  );\n}\n\nexport default Card;\n","import type { MouseEventHandler } from \"react\";\n\ninterface Props {\n  disabled?: boolean;\n  onClick: MouseEventHandler<HTMLElement>;\n  text: string;\n}\n\nfunction Button({ disabled, onClick, text }: Props) {\n  return (\n    <button\n      className={\n        \"rounded p-2 \" + (disabled ? \"\" : \"bg-truffle-blue\") +\n          \" text-truffle-brown uppercase hover:bg-white\"\n      }\n      disabled={disabled}\n      onClick={onClick}\n    >\n      {text}\n    </button>\n  );\n}\n\nexport default Button;\n","import WebSocket from \"isomorphic-ws\";\nimport ReactJson from \"react-json-view\";\nimport { handleDashboardProviderRequest, respond } from \"../../utils/utils\";\nimport Button from \"../common/Button\";\nimport Card from \"../common/Card\";\nimport { DashboardProviderMessage } from \"@truffle/dashboard-message-bus\";\nimport { useState } from \"react\";\n\ninterface Props {\n  request: DashboardProviderMessage;\n  setRequests: (\n    requests:\n      | DashboardProviderMessage[]\n      | ((requests: DashboardProviderMessage[]) => DashboardProviderMessage[])\n  ) => void;\n  provider: any;\n  socket: WebSocket;\n}\n\nfunction IncomingRequest({ provider, socket, request, setRequests }: Props) {\n  const [disable, setDisable] = useState(false);\n\n  const removeFromRequests = () => {\n    setRequests(previousRequests =>\n      previousRequests.filter(other => other.id !== request.id)\n    );\n  };\n\n  const process = async () => {\n    await handleDashboardProviderRequest(request, provider, socket);\n    removeFromRequests();\n  };\n\n  const reject = async () => {\n    const errorResponse = {\n      id: request.id,\n      payload: {\n        jsonrpc: request.payload.jsonrpc,\n        id: request.payload.id,\n        error: {\n          code: 4001,\n          message: \"User rejected @truffle/dashboard request\"\n        }\n      }\n    };\n\n    respond(errorResponse, socket);\n    removeFromRequests();\n  };\n\n  const formatDashboardProviderRequestParameters = (\n    request: DashboardProviderMessage\n  ) => {\n    switch (request.payload.method) {\n      case \"eth_sendTransaction\":\n      case \"eth_signTransaction\": {\n        const [transaction] = request.payload.params;\n        return <ReactJson name=\"transaction\" src={transaction as any} />;\n      }\n      case \"eth_signTypedData_v1\":\n      case \"eth_signTypedData\": {\n        const [messageParams, from] = request.payload.params;\n        return (\n          <div>\n            <div>Account: {from}</div>\n            <div className=\"flex gap-2\">\n              <div>Message:</div>\n              <ReactJson name=\"message params\" src={messageParams} />\n            </div>\n          </div>\n        );\n      }\n      case \"eth_signTypedData_v3\":\n      case \"eth_signTypedData_v4\": {\n        const [from, messageParams] = request.payload.params;\n        const { message } = JSON.parse(messageParams);\n        return (\n          <div>\n            <div>Account: {from}</div>\n            <div className=\"flex gap-2\">\n              <div>Message:</div>\n              <ReactJson name=\"message\" src={message} />\n            </div>\n          </div>\n        );\n      }\n      case \"personal_sign\": {\n        const [message, from] = request.payload.params;\n        return (\n          <div>\n            <div>Account: {from}</div>\n            <div className=\"flex gap-2\">\n              <div>Message:</div>\n              <div>{message}</div>\n            </div>\n          </div>\n        );\n      }\n      case \"eth_decrypt\":\n      default: {\n        return <ReactJson src={request.payload.params} />;\n      }\n    }\n  };\n\n  const header = <div className=\"normal-case\">{request.payload.method}</div>;\n\n  const body = <div>{formatDashboardProviderRequestParameters(request)}</div>;\n\n  const footer = disable\n    ? <div className=\"flex justify-start items-center gap-2\">\n        <Button disabled onClick={() => {}} text=\"Processing...\" />\n      </div>\n    : <div className=\"flex justify-start items-center gap-2\">\n        <Button onClick={() => {process(); setDisable(true);}} text=\"Process\" />\n        <Button onClick={reject} text=\"Reject\" />\n      </div>;\n\n  return (\n    <div key={request.id} className=\"flex justify-center items-center\">\n      <Card header={header} body={body} footer={footer} />\n    </div>\n  );\n}\n\nexport default IncomingRequest;\n","import WebSocket from \"isomorphic-ws\";\nimport { useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { providers } from \"ethers\";\nimport {\n  handleDashboardProviderRequest,\n  isInteractiveRequest,\n  isUnsupportedRequest,\n  respondToUnsupportedRequest\n} from \"../../utils/utils\";\nimport Card from \"../common/Card\";\nimport IncomingRequest from \"./IncomingRequest\";\nimport type { DashboardProviderMessage } from \"@truffle/dashboard-message-bus\";\n\ninterface Props {\n  paused: boolean;\n  requests: DashboardProviderMessage[];\n  setRequests: (\n    requests:\n      | DashboardProviderMessage[]\n      | ((requests: DashboardProviderMessage[]) => DashboardProviderMessage[])\n  ) => void;\n  socket: WebSocket;\n}\n\nfunction DashboardProvider({ paused, socket, requests, setRequests }: Props) {\n  const { account, library } = useWeb3React<providers.Web3Provider>();\n\n  useEffect(() => {\n    const removeFromRequests = (id: number) => {\n      setRequests(previousRequests =>\n        previousRequests.filter(request => request.id !== id)\n      );\n    };\n\n    if (!account || !library) return;\n    if (paused) return;\n\n    // Automatically respond with an error for unsupported requests\n    requests.filter(isUnsupportedRequest).forEach(request => {\n      respondToUnsupportedRequest(request, socket);\n      removeFromRequests(request.id);\n    });\n\n    // Automatically handle all non-interactive requests\n    requests\n      .filter(\n        request =>\n          !isInteractiveRequest(request) && !isUnsupportedRequest(request)\n      )\n      .forEach(request => {\n        handleDashboardProviderRequest(request, library.provider, socket);\n        removeFromRequests(request.id);\n      });\n  }, [paused, requests, setRequests, socket, account, library]);\n\n  const incomingRequests =\n    account && library && socket\n      ? requests\n          .filter(isInteractiveRequest)\n          .map(request => (\n            <IncomingRequest\n              request={request}\n              setRequests={setRequests}\n              provider={library.provider}\n              socket={socket}\n            />\n          ))\n      : [];\n\n  return (\n    <div className=\"flex justify-center items-center py-20\">\n      <div className=\"mx-3 w-3/4 max-w-4xl h-2/3\">\n        <Card header=\"Incoming Requests\" body={incomingRequests} />\n      </div>\n    </div>\n  );\n}\n\nexport default DashboardProvider;\n","import { useWeb3React } from \"@web3-react/core\";\nimport { providers } from \"ethers\";\nimport Card from \"./common/Card\";\nimport Button from \"./common/Button\";\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\nimport NetworkIndicator from \"./common/NetworkIndicator\";\n\ninterface Props {\n  confirm: () => void;\n}\n\nfunction ConnectNetwork({ confirm }: Props) {\n  const { chainId, activate } = useWeb3React<providers.Web3Provider>();\n  const injectedConnector = new InjectedConnector({});\n\n  const connectBody =\n    \"Please connect your wallet to use the Truffle Dashboard Provider.\";\n\n  const connectButton = (\n    <Button text=\"Connect Wallet\" onClick={() => activate(injectedConnector)} />\n  );\n\n  const confirmBody = chainId && (\n    <div className=\"flex flex-col gap-2\">\n      <div>\n        Please confirm you're connected to the right network (or switch to the\n        right one) before continuing.\n      </div>\n      <div className=\"flex justify-center\">\n        <NetworkIndicator chainId={chainId} />\n      </div>\n    </div>\n  );\n\n  const confirmButton = <Button text=\"Confirm\" onClick={confirm} />;\n\n  return (\n    <div className=\"flex justify-center items-center py-20\">\n      <div className=\"mx-3 w-3/4 max-w-4xl h-2/3 text-center\">\n        {chainId === undefined ? (\n          <Card\n            header=\"Connect Wallet\"\n            body={connectBody}\n            footer={connectButton}\n          />\n        ) : (\n          <Card\n            header=\"Connect Wallet\"\n            body={confirmBody}\n            footer={confirmButton}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ConnectNetwork;\n","import Card from \"./common/Card\";\nimport Button from \"./common/Button\";\nimport NetworkIndicator from \"./common/NetworkIndicator\";\n\ninterface Props {\n  confirm: () => void;\n  newChainId: number;\n  previousChainId: number;\n}\n\nfunction ConfirmNetworkChanged({\n  confirm,\n  newChainId,\n  previousChainId\n}: Props) {\n  const confirmBody = (\n    <div className=\"flex flex-col gap-2\">\n      <div>\n        We detected that your connected network changed. Please confirm that\n        this was your intention or switch back to the previous network.\n      </div>\n      <div>Your previous connected network was:</div>\n      <div className=\"flex justify-center\">\n        <NetworkIndicator chainId={previousChainId} />\n      </div>\n      <div>Your new connected network is:</div>\n      <div className=\"flex justify-center\">\n        <NetworkIndicator chainId={newChainId} />\n      </div>\n    </div>\n  );\n\n  const confirmButton = <Button text=\"Confirm\" onClick={confirm} />;\n\n  return (\n    <div className=\"flex justify-center items-center py-20\">\n      <div className=\"mx-3 w-3/4 max-w-4xl h-2/3 text-center\">\n        <Card\n          header=\"Confirm Network Changed\"\n          body={confirmBody}\n          footer={confirmButton}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default ConfirmNetworkChanged;\n","import WebSocket from \"isomorphic-ws\";\nimport {\n  DashboardProviderMessage,\n  connectToMessageBusWithRetries,\n  isDashboardProviderMessage,\n  isInvalidateMessage,\n  Message,\n  base64ToJson\n} from \"@truffle/dashboard-message-bus\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useEffect, useState } from \"react\";\nimport { getPorts } from \"./utils/utils\";\nimport Header from \"./components/Header/Header\";\nimport DashboardProvider from \"./components/DashboardProvider/DashboardProvider\";\nimport ConnectNetwork from \"./components/ConnectNetwork\";\nimport ConfirmNetworkChanged from \"./components/ConfirmNetworkChange\";\n\nfunction Dashboard() {\n  const [paused, setPaused] = useState<boolean>(false);\n  const [connectedChainId, setConnectedChainId] = useState<number>();\n  const [socket, setSocket] = useState<WebSocket | undefined>();\n  const [dashboardProviderRequests, setDashboardProviderRequests] = useState<\n    DashboardProviderMessage[]\n  >([]);\n\n  const { chainId } = useWeb3React();\n\n  useEffect(() => {\n    if (!chainId || !socket) return;\n\n    if (connectedChainId) {\n      if (connectedChainId !== chainId) setPaused(true);\n      if (connectedChainId === chainId) setPaused(false);\n    } else {\n      setConnectedChainId(chainId);\n    }\n  }, [chainId, connectedChainId, socket]);\n\n  const initializeSocket = async () => {\n    if (socket && socket.readyState === WebSocket.OPEN) return;\n\n    const messageBusHost = window.location.hostname;\n    const { subscribePort } = await getPorts();\n    const connectedSocket = await connectToMessageBusWithRetries(\n      subscribePort,\n      messageBusHost\n    );\n\n    connectedSocket.addEventListener(\n      \"message\",\n      (event: WebSocket.MessageEvent) => {\n        if (typeof event.data !== \"string\") {\n          event.data = event.data.toString();\n        }\n\n        const message = base64ToJson(event.data) as Message;\n\n        console.debug(\"Received message\", message);\n\n        if (isDashboardProviderMessage(message)) {\n          setDashboardProviderRequests(previousRequests => [\n            ...previousRequests,\n            message\n          ]);\n        } else if (isInvalidateMessage(message)) {\n          setDashboardProviderRequests(previousRequests =>\n            previousRequests.filter(request => request.id !== message.payload)\n          );\n        }\n      }\n    );\n\n    connectedSocket.send(\"ready\");\n\n    setSocket(connectedSocket);\n  };\n\n  return (\n    <div className=\"h-full min-h-screen bg-gradient-to-b from-truffle-lighter to-truffle-light\">\n      <Header />\n      {paused && chainId && connectedChainId && (\n        <ConfirmNetworkChanged\n          newChainId={chainId}\n          previousChainId={connectedChainId}\n          confirm={() => setConnectedChainId(chainId)}\n        />\n      )}\n      {!paused && !socket && <ConnectNetwork confirm={initializeSocket} />}\n      {!paused && socket && (\n        <DashboardProvider\n          paused={paused}\n          socket={socket}\n          requests={dashboardProviderRequests}\n          setRequests={setDashboardProviderRequests}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Dashboard;\n","import { getLibrary } from \"./utils/utils\";\nimport { Web3ReactProvider } from \"@web3-react/core\";\nimport Dashboard from \"./Dashboard\";\n\nfunction App() {\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <Dashboard />\n    </Web3ReactProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getMessageBusPorts = exports.connectToMessageBus = exports.connectToMessageBusWithRetries = exports.sendAndAwait = exports.broadcastAndAwaitFirst = exports.broadcastAndDisregard = exports.createMessage = exports.startWebSocketServer = exports.base64ToJson = exports.jsonToBase64 = void 0;\nconst isomorphic_ws_1 = __importDefault(require(\"isomorphic-ws\"));\nconst promise_any_1 = __importDefault(require(\"promise.any\"));\nconst delay_1 = __importDefault(require(\"delay\"));\nconst axios_1 = __importDefault(require(\"axios\"));\npromise_any_1.default.shim();\n/**\n * Convert any JS object or value to a base64 representation of it\n */\nconst jsonToBase64 = (json) => {\n    const stringifiedJson = JSON.stringify(json);\n    const buffer = Buffer.from(stringifiedJson);\n    const base64 = buffer.toString(\"base64\");\n    return base64;\n};\nexports.jsonToBase64 = jsonToBase64;\n/**\n * Convert the base64 representation of a JS object or value to its JS representation\n * @dev This is the reverse of `jsonToBase64` and is not expected to work with other base64 formats\n */\nconst base64ToJson = (base64) => {\n    const buffer = Buffer.from(base64, \"base64\");\n    const stringifiedJson = buffer.toString(\"utf8\");\n    const json = JSON.parse(stringifiedJson);\n    return json;\n};\nexports.base64ToJson = base64ToJson;\n/**\n * Starts a websocket server and waits for it to be opened\n * @dev If you need to attach event listeners *before* the server connection opens,\n * do not use this function since it resolves *after* the connection is opened\n */\nconst startWebSocketServer = (options) => {\n    return new Promise(resolve => {\n        const server = new isomorphic_ws_1.default.Server(options, () => resolve(server));\n    });\n};\nexports.startWebSocketServer = startWebSocketServer;\nconst createMessage = (type, payload) => {\n    const id = Math.random();\n    return { id, type, payload };\n};\nexports.createMessage = createMessage;\n/**\n * Broadcast a message to multiple websocket connections and disregard them\n */\nconst broadcastAndDisregard = (sockets, message) => {\n    const encodedMessage = exports.jsonToBase64(message);\n    sockets.forEach(socket => {\n        socket.send(encodedMessage);\n    });\n};\nexports.broadcastAndDisregard = broadcastAndDisregard;\n/**\n * Broadcast a message to multuple websocket connections and return the first response\n */\nconst broadcastAndAwaitFirst = (sockets, message) => __awaiter(void 0, void 0, void 0, function* () {\n    const promises = sockets.map(socket => exports.sendAndAwait(socket, message));\n    const result = yield Promise.any(promises);\n    return result;\n});\nexports.broadcastAndAwaitFirst = broadcastAndAwaitFirst;\n/**\n * Send a message to a websocket connection and await a matching response\n * @dev Responses are matched by looking at received messages that match the ID of the sent message\n */\nconst sendAndAwait = (socket, message) => {\n    return new Promise((resolve, reject) => {\n        socket.addEventListener(\"message\", (event) => {\n            if (typeof event.data !== \"string\") {\n                event.data = event.data.toString();\n            }\n            const response = exports.base64ToJson(event.data);\n            if (response.id !== message.id)\n                return;\n            resolve(response);\n        });\n        // TODO: Need to check that the error corresponds to the sent message?\n        socket.addEventListener(\"error\", (event) => {\n            reject(event.error);\n        });\n        socket.addEventListener(\"close\", (event) => {\n            reject(new Error(`Socket connection closed with code '${event.code}' and reason '${event.reason}'`));\n        });\n        const encodedMessage = exports.jsonToBase64(message);\n        socket.send(encodedMessage);\n    });\n};\nexports.sendAndAwait = sendAndAwait;\nconst connectToMessageBusWithRetries = (port, host = \"localhost\", retries = 50) => __awaiter(void 0, void 0, void 0, function* () {\n    let error = new Error();\n    for (let tryCount = 0; tryCount < retries; tryCount += 1) {\n        try {\n            return yield exports.connectToMessageBus(port, host);\n        }\n        catch (e) {\n            error = e;\n            yield delay_1.default(1000);\n        }\n    }\n    throw error;\n});\nexports.connectToMessageBusWithRetries = connectToMessageBusWithRetries;\nconst connectToMessageBus = (port, host = \"localhost\") => {\n    const socket = new isomorphic_ws_1.default(`ws://${host}:${port}`);\n    return new Promise((resolve, reject) => {\n        socket.addEventListener(\"open\", () => resolve(socket));\n        socket.addEventListener(\"error\", (event) => reject(event.error));\n    });\n};\nexports.connectToMessageBus = connectToMessageBus;\nconst getMessageBusPorts = (dashboardPort, dashboardHost = \"localhost\", retries = 5) => __awaiter(void 0, void 0, void 0, function* () {\n    for (let tryCount = 0; tryCount < retries; tryCount += 1) {\n        try {\n            const { data } = yield axios_1.default.get(`http://${dashboardHost}:${dashboardPort}/ports`);\n            return data;\n        }\n        catch (e) {\n            yield delay_1.default(1000);\n        }\n    }\n    throw new Error(`Could not connect to dashboard at http://${dashboardHost}:${dashboardPort}/ports`);\n});\nexports.getMessageBusPorts = getMessageBusPorts;\n//# sourceMappingURL=utils.js.map"],"sourceRoot":""}